[{"C:\\Users\\Aubrey\\Documents\\reactnodefullstackapp\\client\\src\\Welcome.js":"1","C:\\Users\\Aubrey\\Documents\\reactnodefullstackapp\\client\\src\\PopularGames.js":"2","C:\\Users\\Aubrey\\Documents\\reactnodefullstackapp\\client\\src\\CardGames.js":"3","C:\\Users\\Aubrey\\Documents\\reactnodefullstackapp\\client\\src\\TopNavigation.js":"4","C:\\Users\\Aubrey\\Documents\\reactnodefullstackapp\\client\\src\\serviceWorker.js":"5","C:\\Users\\Aubrey\\Documents\\reactnodefullstackapp\\client\\src\\index.js":"6","C:\\Users\\Aubrey\\Documents\\reactnodefullstackapp\\client\\src\\App.js":"7"},{"size":1001,"mtime":1619314446237,"results":"8","hashOfConfig":"9"},{"size":11931,"mtime":1619900787095,"results":"10","hashOfConfig":"9"},{"size":14221,"mtime":1619794465896,"results":"11","hashOfConfig":"9"},{"size":878,"mtime":1619700048631,"results":"12","hashOfConfig":"9"},{"size":5481,"mtime":1619075003960,"results":"13","hashOfConfig":"9"},{"size":898,"mtime":1619074460705,"results":"14","hashOfConfig":"9"},{"size":610,"mtime":1619485817678,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"117wau4",{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"20","messages":"21","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Aubrey\\Documents\\reactnodefullstackapp\\client\\src\\Welcome.js",[],"C:\\Users\\Aubrey\\Documents\\reactnodefullstackapp\\client\\src\\PopularGames.js",["31"],"C:\\Users\\Aubrey\\Documents\\reactnodefullstackapp\\client\\src\\CardGames.js",["32","33","34","35","36","37","38"],"import React, { useState, useCallback} from 'react';\r\n//import axios from 'axios'\r\nimport _ from 'lodash'\r\nimport {useQuery, useMutation, gql} from '@apollo/client'\r\nimport {Card, IconButton, Typography, Container, \r\n    Dialog, Button, DialogTitle, DialogContent, DialogContentText, \r\n    DialogActions, TextField, Box, CardMedia, Link} from '@material-ui/core'\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport AddCircleIcon from '@material-ui/icons/Add';\r\nimport LazyLoad from 'react-lazyload'\r\nimport './css/cardStyles.css'\r\nimport { Formik } from 'formik' \r\nimport * as Yup from 'yup'\r\n\r\n\r\n//const PORT = process.env.PORT || 3000\r\n\r\n\r\n\r\nconst Loading = () => (\r\n<div>\r\n<h4>Loading...</h4>\r\n\r\n</div>\r\n\r\n\r\n)\r\n\r\n\r\n\r\n\r\nconst ALL_GAMES = gql`\r\nquery {\r\n    allGames {\r\n        id \r\n        title\r\n        description \r\n        image\r\n        price\r\n      \r\n    }\r\n}\r\n`\r\nconsole.log(ALL_GAMES)\r\n\r\n\r\nconst CREATE_GAME = gql `\r\n    mutation createGame ( $title: String!, $description: String, $image: String!, $price: String!) {\r\n        createGame (\r\n            data: {\r\n                title: $title, \r\n                description: $description\r\n                image: $image\r\n                price: $price\r\n            }\r\n        ) {\r\n            id\r\n        }\r\n    }\r\n\r\n`\r\nconsole.log(CREATE_GAME)\r\n\r\nconst UPDATE_GAME = gql`\r\nmutation updateGame ($id: Int!, $title: String!, $description: String, $image: String!, $price: String!) {\r\n    updateGame (id: $id, \r\n        data: {\r\n            title: $title, \r\n            description: $description\r\n            image: $image \r\n            price: $price\r\n            \r\n        }) {\r\n            id\r\n           \r\n        }\r\n}\r\n`\r\n\r\nconst DELETE_GAME = gql`\r\nmutation deleteGame ($id: Int!) {\r\n    deleteGame (id: $id) {\r\n        id\r\n    }\r\n}\r\n`\r\n\r\n\r\n\r\nconst CardGames = () => {\r\n\r\nconst [selectedGame, setSelectedGame] = useState( {title: ''})\r\nconst [debouncedTitle, setDebouncedTitle] = useState('')\r\nconst [createOpen, setCreateOpen] = useState(false)\r\nconst [editOpen, setEditOpen] = useState(false)\r\nconst [deleteOpen, setDeleteOpen] = useState(false)\r\nconst [searchFilter, setSearchFilter] = useState('')\r\n\r\n\r\n\r\nconst handleInput = (event) => {\r\n    debounce(event.target.value)\r\n}\r\n\r\nconst debounce = useCallback (\r\n    _.debounce((searchVal) => {\r\n        setDebouncedTitle(searchVal)\r\n    }, 1000),\r\n    []\r\n)\r\n\r\n\r\n    const { loading, error, data} = useQuery(ALL_GAMES)\r\n    const [updateGame] = useMutation(UPDATE_GAME)\r\n    const [deleteGame] = useMutation(DELETE_GAME)\r\n    const [createGame] = useMutation(CREATE_GAME)\r\n\r\n    if (loading) {\r\n        return (\r\n            <Container>\r\n                <Typography>Loading...</Typography>\r\n            </Container>\r\n        )\r\n    }\r\n    if (error) {\r\n        return (\r\n            <Typography>{`${error.message}`}</Typography>\r\n        )\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    const gameList = data.allGames \r\n\r\n\r\n\r\n\r\n    const handleDelete = async () => {\r\n        setDeleteOpen(false)\r\n        console.log(selectedGame.id)\r\n        try {\r\n            deleteGame({ variables: {id: selectedGame.id}})\r\n            } catch (err) {\r\n            console.error(err)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const handleClickDeleteOpen = (game) => {\r\n        setSelectedGame(game.game)\r\n        setDeleteOpen(true)\r\n      }\r\n      \r\n      const handleCloseDelete = () => {\r\n          setDeleteOpen(false)\r\n      }\r\n\r\n\r\n\r\n\r\n    const handleClickEditOpen = (game) => {\r\n        setSelectedGame(game.game) \r\n        setEditOpen(true)\r\n    }\r\n\r\n\r\n    \r\n\r\n    const handleCloseEdit = () => {\r\n        setEditOpen(false)\r\n    }\r\n\r\n\r\n\r\n  \r\n    const handleUpdate = async (values) => {\r\n        updateGame({\r\n            variables: {\r\n                id: selectedGame.id, \r\n                image: values.image,\r\n                title: values.title, \r\n                description: values.description,\r\n                price: values.price\r\n            }\r\n        })\r\n        }\r\n    \r\n\r\n        \r\n        const handleClickCreateOpen = () => {\r\n            console.log('create game button clicked')\r\n            setCreateOpen(true)\r\n          }\r\n          \r\n          const handleCloseCreate = () => {\r\n              setCreateOpen(false)\r\n          }\r\n\r\n          const handleCreate = async (values) => {\r\n            createGame({\r\n                variables: {\r\n                    image: values.image,\r\n                    title: values.title,  \r\n                    description: values.description, \r\n                    price: values.price\r\n                }\r\n            })\r\n            }\r\n\r\n\r\n\r\n\r\nreturn (\r\n    <div className=\"main-1\">\r\n     <h1 className=\"gamesHeader\">Card Games</h1>\r\n     <div className=\"actions\">\r\n     <IconButton aria-label='add' onClick={() => handleClickCreateOpen()} className=\"addButton\">\r\n             Create Game <AddCircleIcon />\r\n             </IconButton>\r\n     </div>\r\n<div></div>\r\n\r\n    {gameList.map((game, index) => {\r\n     return (\r\n    <Card className=\"game-container\" key={game.id} index={index}>\r\n    <LazyLoad placeholder={<Loading></Loading>}> \r\n    <CardMedia \r\n     className=\"CardMedia\"\r\n     component=\"img\"\r\n     alt={'Card Game'}\r\n     image={`./${game.image}`}\r\n     card={game.game}\r\n     />\r\n     <Typography className=\"gameInfoTitle\">{game.title}</Typography>\r\n     <Typography className=\"gameInfo\">{game.description}</Typography>\r\n     <Typography className=\"gameInfoJP\">Current Jackpot: ${game.price}</Typography>\r\n    <div className=\"iconButtons\">\r\n     <IconButton aria-label='edit' onClick={() => handleClickEditOpen({ game })}> <EditIcon/></IconButton>\r\n     <IconButton aria-label='delete' onClick={() => handleClickDeleteOpen({game})}><DeleteIcon/></IconButton>\r\n     </div>\r\n     </LazyLoad>\r\n     </Card>\r\n    \r\n    )\r\n    \r\n     })\r\n     }\r\n   \r\n     <Dialog \r\n    open={editOpen}\r\n    onClose={handleCloseEdit}\r\n    aria-labelledby='edit-dialog-title'>\r\n    <Formik\r\n    initialValues={{\r\n        title: selectedGame?.title,  \r\n        description: selectedGame?.description, \r\n        image: selectedGame?.image,\r\n        price: selectedGame?.price\r\n\r\n    }}\r\n    validationSchema={Yup.object().shape({\r\n        title: Yup.string('Enter Game Title').required(\r\n            'Game title is required', \r\n        ),\r\n        description: Yup.string('Description').required(\r\n            'Game description is required', \r\n        ), \r\n        image: Yup.string('Image').required(\r\n            'Game image is required', \r\n        ), \r\n        price: Yup.string('Price').required(\r\n            'Game jackpot is required', \r\n        ),\r\n        \r\n    })}\r\n    onSubmit={async (values, {setErrors, setStatus, setSubmitting}) => {\r\n        try {\r\n            await handleUpdate(values) \r\n            handleCloseEdit()\r\n        }   catch (err) {\r\n            console.error(err)\r\n            setStatus({ success: false })\r\n            setErrors({ submit: err.message })\r\n            setSubmitting(false)\r\n        }\r\n    }}\r\n    >\r\n    {({\r\n        values, \r\n        errors, \r\n        touched, \r\n        handleChange, \r\n        handleBlur, \r\n        handleSubmit, \r\n        isSubmitting,\r\n    }) => (\r\n        <form \r\n        noValidate \r\n        autoComplete='off' \r\n        onSubmit={handleSubmit}\r\n        >\r\n         <DialogTitle id=\"edit-dialog-title\">Edit Game</DialogTitle>   \r\n         <DialogContent>\r\n             <DialogContentText>\r\n                 Edit Information for this Game: \r\n             </DialogContentText>\r\n             <TextField \r\n            autoFocus \r\n            id=\"title\"\r\n            name=\"title\"\r\n            label=\"Game Title\"\r\n            type=\"text\"\r\n            fullWidth\r\n            value={values.title}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            error={Boolean(touched.title && errors.title)} \r\n            helperText={touched.title && errors.title} \r\n            />\r\n               <Box>\r\n                <TextField \r\n            autoFocus \r\n            id=\"description\"\r\n            name=\"description\"\r\n            label=\"Game Description\"\r\n            type=\"text\"\r\n            fullWidth\r\n            value={values.description}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            error={Boolean(touched.description && errors.description)} \r\n            helperText={touched.description && errors.description} \r\n                />\r\n            </Box>\r\n            <Box>\r\n                <TextField \r\n            autoFocus \r\n            id=\"image\"\r\n            name=\"image\"\r\n            label=\"Game Image\"\r\n            type=\"text\"\r\n            fullWidth\r\n            value={values.image}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            error={Boolean(touched.image && errors.image)} \r\n            helperText={touched.image && errors.image} \r\n                />\r\n            </Box>\r\n            <Box>\r\n                <TextField \r\n            autoFocus \r\n            id=\"price\"\r\n            name=\"price\"\r\n            label=\"Current Game Jackpot\"\r\n            type=\"text\"\r\n            fullWidth\r\n            value={values.price}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            error={Boolean(touched.price && errors.price)} \r\n            helperText={touched.price && errors.price} \r\n                />\r\n            </Box>\r\n         </DialogContent>\r\n         <DialogActions>\r\n             <Button onClick={handleCloseEdit}>Cancel</Button>\r\n             <Button type='submit'>Save</Button>\r\n         </DialogActions>\r\n       \r\n        </form>\r\n    )}\r\n\r\n\r\n\r\n    </Formik>\r\n\r\n    </Dialog>\r\n\r\n\r\n\r\n\r\n    <form>\r\n     <Container>\r\n        <Dialog open={deleteOpen} onClose={handleCloseDelete}>\r\n        <DialogTitle>Delete Game</DialogTitle>\r\n        <DialogContent>\r\n            <DialogContentText>\r\n                Are you sure you want to delete this Game?\r\n            </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n            <Button onClick={handleCloseDelete}>Cancel</Button>\r\n            <Button onClick={handleDelete}>Delete</Button>\r\n        </DialogActions>\r\n        </Dialog>\r\n     </Container>\r\n\r\n\r\n     </form>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n     <Dialog \r\n    open={createOpen}\r\n    onClose={handleCloseCreate}\r\n    aria-labelledby='create-dial'>\r\n    <Formik\r\n    initialValues={{\r\n        title: selectedGame?.title,  \r\n        description: selectedGame?.description,\r\n        image: selectedGame?.image,\r\n        price: selectedGame?.price  \r\n       \r\n    }}\r\n    validationSchema={Yup.object().shape({\r\n        title: Yup.string('Enter Game Title').required(\r\n            'Game title is required', \r\n        ),\r\n        \r\n        description: Yup.string('Description').required(\r\n            'Game description is required', \r\n        ), \r\n        image: Yup.string('image').required(\r\n            'Game image is required', \r\n        ),\r\n        price: Yup.string('price').required(\r\n            'Game jackpot is required', \r\n        ),\r\n         \r\n    })}\r\n    onSubmit={async (values, {setErrors, setStatus, setSubmitting}) => {\r\n        try {\r\n            await handleCreate(values) \r\n            handleCloseCreate()\r\n        }   catch (err) {\r\n            console.error(err)\r\n            setStatus({ success: false })\r\n            setErrors({ submit: err.message })\r\n            setSubmitting(false)\r\n        }\r\n    }}\r\n    >\r\n    {({\r\n        values,\r\n        errors, \r\n        touched, \r\n        handleChange, \r\n        handleBlur, \r\n        handleSubmit, \r\n        isSubmitting,\r\n    }) => (\r\n        <form \r\n        noValidate \r\n        autoComplete='off' \r\n        onSubmit={handleSubmit}\r\n        >\r\n         <DialogTitle id=\"create-dial\">Create Game</DialogTitle>   \r\n         <DialogContent>\r\n             <DialogContentText>\r\n                 Create Information for this Game: \r\n             </DialogContentText>\r\n             <TextField \r\n            autoFocus \r\n            id=\"title\"\r\n            name=\"title\"\r\n            label=\"Game Title\"\r\n            type=\"text\"\r\n            value={values.title}\r\n            fullWidth\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            error={Boolean(touched.title && errors.title)} \r\n            helperText={touched.title && errors.title} \r\n            />\r\n               <Box>\r\n                <TextField \r\n            autoFocus \r\n            id=\"description\"\r\n            name=\"description\"\r\n            label=\"Game Description\"\r\n            value={values.description}\r\n            type=\"text\"\r\n            fullWidth\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            error={Boolean(touched.description && errors.description)} \r\n            helperText={touched.description && errors.description} \r\n                />\r\n            </Box>\r\n            <Box>\r\n                <TextField \r\n            autoFocus \r\n            id=\"image\"\r\n            name=\"image\"\r\n            label=\"Game Image\"\r\n            type=\"text\"\r\n            fullWidth\r\n            value={values.image}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            error={Boolean(touched.image && errors.image)} \r\n            helperText={touched.image && errors.image} \r\n                />\r\n            </Box>\r\n            <Box>\r\n                <TextField \r\n            autoFocus \r\n            id=\"price\"\r\n            name=\"price\"\r\n            label=\"Game Jackpot\"\r\n            type=\"text\"\r\n            fullWidth\r\n            value={values.price}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            error={Boolean(touched.price && errors.price)} \r\n            helperText={touched.price && errors.price} \r\n                />\r\n            </Box>\r\n         </DialogContent>\r\n         <DialogActions>\r\n             <Button onClick={handleCloseCreate}>Cancel</Button>\r\n             <Button type='submit'>Create Game</Button>\r\n         </DialogActions>\r\n       \r\n        </form>\r\n    )}\r\n\r\n\r\n\r\n    </Formik>\r\n\r\n    </Dialog>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n   \r\n   </div>\r\n\r\n)\r\n\r\n}\r\n\r\n\r\n  \r\nexport default CardGames ","C:\\Users\\Aubrey\\Documents\\reactnodefullstackapp\\client\\src\\TopNavigation.js",[],"C:\\Users\\Aubrey\\Documents\\reactnodefullstackapp\\client\\src\\serviceWorker.js",[],"C:\\Users\\Aubrey\\Documents\\reactnodefullstackapp\\client\\src\\index.js",[],"C:\\Users\\Aubrey\\Documents\\reactnodefullstackapp\\client\\src\\App.js",[],{"ruleId":"39","severity":1,"message":"40","line":53,"column":22,"nodeType":"41","endLine":53,"endColumn":33},{"ruleId":"42","severity":1,"message":"43","line":7,"column":47,"nodeType":"41","messageId":"44","endLine":7,"endColumn":51},{"ruleId":"42","severity":1,"message":"45","line":10,"column":8,"nodeType":"41","messageId":"44","endLine":10,"endColumn":18},{"ruleId":"42","severity":1,"message":"46","line":95,"column":8,"nodeType":"41","messageId":"44","endLine":95,"endColumn":22},{"ruleId":"42","severity":1,"message":"47","line":99,"column":8,"nodeType":"41","messageId":"44","endLine":99,"endColumn":20},{"ruleId":"42","severity":1,"message":"48","line":99,"column":22,"nodeType":"41","messageId":"44","endLine":99,"endColumn":37},{"ruleId":"42","severity":1,"message":"49","line":103,"column":7,"nodeType":"41","messageId":"44","endLine":103,"endColumn":18},{"ruleId":"39","severity":1,"message":"40","line":107,"column":18,"nodeType":"41","endLine":107,"endColumn":29},"react-hooks/exhaustive-deps","React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","Identifier","no-unused-vars","'Link' is defined but never used.","unusedVar","'SearchIcon' is defined but never used.","'debouncedTitle' is assigned a value but never used.","'searchFilter' is assigned a value but never used.","'setSearchFilter' is assigned a value but never used.","'handleInput' is assigned a value but never used."]