[{"C:\\Users\\Aubrey\\Documents\\reactnodefullstackapp\\client\\src\\index.js":"1","C:\\Users\\Aubrey\\Documents\\reactnodefullstackapp\\client\\src\\TopNavigation.js":"2","C:\\Users\\Aubrey\\Documents\\reactnodefullstackapp\\client\\src\\App.js":"3","C:\\Users\\Aubrey\\Documents\\reactnodefullstackapp\\client\\src\\reportWebVitals.js":"4","C:\\Users\\Aubrey\\Documents\\reactnodefullstackapp\\client\\src\\serviceWorker.js":"5","C:\\Users\\Aubrey\\Documents\\reactnodefullstackapp\\client\\src\\PopularGames.js":"6","C:\\Users\\Aubrey\\Documents\\reactnodefullstackapp\\client\\src\\CardGames.js":"7","C:\\Users\\Aubrey\\Documents\\reactnodefullstackapp\\client\\src\\Welcome.js":"8"},{"size":898,"mtime":1619074460705,"results":"9","hashOfConfig":"10"},{"size":878,"mtime":1619700048631,"results":"11","hashOfConfig":"10"},{"size":610,"mtime":1619485817678,"results":"12","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"10"},{"size":5481,"mtime":1619075003960,"results":"14","hashOfConfig":"10"},{"size":14071,"mtime":1619760247988,"results":"15","hashOfConfig":"10"},{"size":14474,"mtime":1619760959391,"results":"16","hashOfConfig":"10"},{"size":1001,"mtime":1619314446237,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"117wau4",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Aubrey\\Documents\\reactnodefullstackapp\\client\\src\\index.js",[],"C:\\Users\\Aubrey\\Documents\\reactnodefullstackapp\\client\\src\\TopNavigation.js",[],"C:\\Users\\Aubrey\\Documents\\reactnodefullstackapp\\client\\src\\App.js",[],"C:\\Users\\Aubrey\\Documents\\reactnodefullstackapp\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Aubrey\\Documents\\reactnodefullstackapp\\client\\src\\serviceWorker.js",[],"C:\\Users\\Aubrey\\Documents\\reactnodefullstackapp\\client\\src\\PopularGames.js",["35"],"import React, {useState, useEffect, useCallback} from 'react';\r\nimport axios from 'axios'\r\nimport _ from 'lodash'\r\nimport {Card, IconButton, CardMedia, Typography, Container, \r\n    Dialog, Button, DialogTitle, DialogContent, DialogContentText, \r\n    DialogActions, TextField, Box, CardContent, Link} from '@material-ui/core'\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport AddCircleIcon from '@material-ui/icons/Add';\r\n//import LinkIcon from '@material-ui/icons/Link';\r\n//import LazyLoad from 'react-lazyload'\r\nimport './css/cardStyles.css'\r\nimport { Formik } from 'formik' \r\nimport * as Yup from 'yup'\r\nimport * as dotenv from 'dotenv'\r\n\r\n\r\n\r\ndotenv.config()\r\nconst port = process.env.PORT || 8080\r\n\r\n\r\n/* \r\nconst Loading = () => (\r\n<div>\r\n<h4>Loading...</h4>\r\n\r\n</div>\r\n\r\n\r\n)\r\n\r\n */\r\n\r\nconst PopularGames = () => {\r\n\r\nconst [selectedGame, setSelectedGame] = useState( { name: ''})\r\nconst [gameData, setGameData] = useState([])\r\nconst [debouncedName, setDebouncedName] = useState('')\r\nconst [createOpen, setCreateOpen] = useState(false)\r\nconst [editOpen, setEditOpen] = useState(false)\r\nconst [deleteOpen, setDeleteOpen] = useState(false)\r\n\r\n\r\n\r\n\r\nconst handleInput = (event) => {\r\n    debounce(event.target.value)\r\n}\r\n\r\n\r\n    const debounce = useCallback(\r\n        _.debounce((searchVal) => {\r\n            setDebouncedName(searchVal)\r\n        }, 1000), \r\n        [],\r\n    )\r\n\r\n    \r\n\r\n\r\n    const handleSearch = () => {\r\n        if (debouncedName) {\r\n            setGameData(gameData.filter(game => game.name.includes(debouncedName)))\r\n        } else {\r\n            fetchGames()\r\n        }\r\n    }\r\n\r\n\r\n\r\n    \r\n    const handleClickCreateOpen = () => {\r\n        setCreateOpen(true)\r\n    }\r\n\r\n    const handleCloseCreate = () => {\r\n        setCreateOpen(false)\r\n    }\r\n\r\n\r\n\r\n    const handleCreate = async (values) => {\r\n        try {\r\n            const result = await axios.post(`http://localhost:${port}/populargame/create`, {\r\n                data: {\r\n                    gameId: values.id,\r\n                    name: values.name, \r\n                    image_url: values.image_url, \r\n                    description: values.description, \r\n                    price: values.price,\r\n                },\r\n            })\r\n            if (result.status === 200) {\r\n                fetchGames()\r\n            }\r\n        } catch (err) {\r\n            console.error(err)\r\n        }\r\n        }\r\n\r\n    console.log(handleCreate())\r\n\r\n\r\n\r\n\r\n\r\n    const handleClickEditOpen = (game) => {\r\n        setSelectedGame(game.game) \r\n        setEditOpen(true)\r\n    }\r\n\r\n    const handleCloseEdit = () => {\r\n        setEditOpen(false)\r\n    }\r\n    \r\n\r\nconst handleUpdate = async (values) => {\r\n    try {\r\n        const result = await axios.put(`http://localhost:${port}/populargame/update`, {\r\n            data: {\r\n                gameId: values.id, \r\n                name: values.name, \r\n                image_url: values.image_url, \r\n                description: values.description, \r\n                price: values.price,\r\n            },\r\n        })\r\n        if (result.status === 200) {\r\n            fetchGames()\r\n        }\r\n    } catch (err) {\r\n        console.error(err)\r\n    }\r\n    }\r\n\r\n\r\n\r\n    \r\n\r\n\r\n\r\nconst handleClickDeleteOpen = (game) => {\r\n    console.log('You clicked to delete')\r\n    console.log(game._id)\r\n    setSelectedGame(game.game)\r\n    setDeleteOpen(true)\r\n}\r\n\r\nconst handleCloseDelete = () => {\r\n    setDeleteOpen(false)\r\n}\r\n\r\nconst handleDelete = async () => {\r\n    setDeleteOpen(false)\r\n    console.log(selectedGame._id)\r\n    try {\r\n        await axios.delete(`http://localhost:${port}/populargame/delete`, { \r\n        data: {   \r\n        gameId: selectedGame._id\r\n        }\r\n    })\r\n    fetchGames()\r\n    } catch (err) {\r\n        console.error(err)\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nconst fetchGames = async () => {\r\n    try {\r\n    const populargamesInfo = await axios.get(`http://localhost:${port}/populargame`)\r\n    setGameData(populargamesInfo.data)\r\n    console.log(populargamesInfo.data)\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n    }\r\n    \r\n    \r\n    useEffect(() => {\r\n        fetchGames()\r\n       \r\n    }, [])\r\n\r\n\r\nreturn (\r\n    <>\r\n    <div className=\"main-1\">\r\n     <h1 className=\"gamesHeader\"> Popular Games</h1>\r\n     <div className=\"gameparentSearch\">\r\n     <IconButton aria-label='add' onClick={() => handleClickCreateOpen()} className=\"addButton\">\r\n             Create Game <AddCircleIcon />\r\n             </IconButton>\r\n\r\n\r\n     <form className=\"gamestatsSearch\">\r\n         <TextField placeholder='Search' onChange={handleInput} />\r\n         <IconButton aria-label='search' onClick={handleSearch}>\r\n             <SearchIcon />\r\n             </IconButton>\r\n     </form>\r\n     </div>\r\n\r\n\r\n    <Container className=\"popular-game-container\">\r\n    {gameData.map((game) => {\r\n     return (\r\n    <Card className=\"popular-game-card\" key={game._id}>\r\n    <Link href={game.url} className=\"gameLink\">\r\n     <CardMedia \r\n     className=\"GameMedia\"\r\n     component=\"img\"\r\n     alt={'Board Game'}\r\n     image={game.image_url}\r\n     card={game.game}\r\n     />\r\n     <CardContent>\r\n     <Typography className=\"gameName\">{game.name}</Typography>\r\n     <Typography className=\"gamePrice\">${game.price}</Typography>\r\n    <div className=\"icons\">\r\n     <IconButton className=\"gameIcon\" aria-label='edit' onClick={() => handleClickEditOpen({ game })}> <EditIcon/></IconButton>\r\n     <IconButton className=\"gameIcon\" aria-label='delete' onClick={() => handleClickDeleteOpen({ game })}><DeleteIcon/></IconButton>\r\n     </div>\r\n     </CardContent>\r\n     </Link>\r\n     </Card>\r\n    \r\n    )\r\n    \r\n     })}\r\n     </Container>\r\n     <Dialog \r\n    open={editOpen}\r\n    onClose={handleCloseEdit}\r\n    aria-labelledby='edit-dialog-id'\r\n    >\r\n    <Formik\r\n    initialValues={{ \r\n        gameId: selectedGame?._id,\r\n        name: selectedGame?.name, \r\n        image_url: selectedGame?.image_url, \r\n        description: selectedGame?.description, \r\n        price: selectedGame?.price, \r\n       \r\n    }}\r\n    validationSchema={Yup.object().shape({\r\n        gameId: Yup.string('Enter game ID').required(\r\n            'Game ID is required',\r\n        ),\r\n        name: Yup.string('Enter game name').required(\r\n            'Game name is required',\r\n        ),\r\n        image_url: Yup.string('Image URL'), \r\n        description: Yup.string('Game Description'), \r\n        price: Yup.string('Game Price'), \r\n        \r\n    })}\r\n    onSubmit={async (values, {setErrors, setStatus, setSubmitting}) => {\r\n        try {\r\n            await handleUpdate(values) \r\n            handleCloseEdit()\r\n        }   catch (err) {\r\n            console.error(err)\r\n            setStatus({ success: false })\r\n            setErrors({ submit: err.message })\r\n            setSubmitting(false)\r\n        }\r\n    }}\r\n    >\r\n    {({\r\n        values, \r\n        errors, \r\n        touched, \r\n        handleChange, \r\n        handleBlur, \r\n        handleSubmit, \r\n        isSubmitting,\r\n    }) => (\r\n        <form \r\n        noValidate \r\n        autoComplete='off' \r\n        onSubmit={handleSubmit}\r\n        >\r\n         <DialogTitle id=\"edit-dialog\">Edit Game Info</DialogTitle>   \r\n         <DialogContent>\r\n             <DialogContentText>\r\n                 Edit Information for this Game: \r\n             </DialogContentText>\r\n             <Box>\r\n            <TextField \r\n            autoFocus \r\n            id=\"name\"\r\n            name=\"name\"\r\n            label=\"Name\"\r\n            type=\"text\"\r\n            fullWidth\r\n            value={values.name}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            error={Boolean(touched.name && errors.name)} \r\n            helperText={touched.name && errors.name} \r\n            />\r\n            </Box>\r\n            <Box>\r\n                <TextField \r\n            autoFocus \r\n            id=\"image_url\"\r\n            name=\"image_url\"\r\n            label=\"Image URL\"\r\n            type=\"text\"\r\n            fullWidth\r\n            value={values.image_url}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            error={Boolean(touched.image_url && errors.image_url)} \r\n            helperText={touched.image_url && errors.image_url} \r\n                />\r\n            </Box>\r\n            <Box>\r\n                <TextField \r\n            autoFocus \r\n            id=\"description\"\r\n            name=\"description\"\r\n            label=\"Description\"\r\n            type=\"text\"\r\n            fullWidth\r\n            value={values.description}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            error={Boolean(touched.description && errors.description)} \r\n            helperText={touched.description && errors.description} \r\n\r\n\r\n                />\r\n            </Box>\r\n\r\n\r\n            <Box>\r\n                <TextField \r\n            autoFocus \r\n            id=\"price\"\r\n            name=\"price\"\r\n            label=\"Price\"\r\n            type=\"text\"\r\n            fullWidth\r\n            value={values.price}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            error={Boolean(touched.price && errors.price)} \r\n            helperText={touched.price && errors.price} \r\n                />\r\n            </Box>\r\n         </DialogContent>\r\n         <DialogActions>\r\n             <Button onClick={handleCloseEdit}>Cancel</Button>\r\n             <Button type='submit'>Save</Button>\r\n         </DialogActions>\r\n       \r\n        </form>\r\n    )}\r\n\r\n\r\n\r\n    </Formik>\r\n\r\n    </Dialog>\r\n\r\n\r\n\r\n\r\n    <form>\r\n     <Container>\r\n        <Dialog open={deleteOpen} onClose={handleCloseDelete}>\r\n        <DialogTitle>Delete Game</DialogTitle>\r\n        <DialogContent>\r\n            <DialogContentText>\r\n                Are you sure you want to delete this game?\r\n            </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n            <Button onClick={handleCloseDelete}>Cancel</Button>\r\n            <Button onClick={handleDelete}>Delete</Button>\r\n        </DialogActions>\r\n        </Dialog>\r\n     </Container>\r\n\r\n\r\n     </form>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n     <Dialog \r\n    open={createOpen}\r\n    onClose={handleCloseCreate}\r\n    aria-labelledby='create-dialog-name'\r\n    >\r\n    <Formik\r\n    initialValues={{\r\n        gameId: selectedGame?._id, \r\n        name: selectedGame?.name, \r\n        image_url: selectedGame?.image_url, \r\n        description: selectedGame?.description, \r\n        price: selectedGame?.price, \r\n      \r\n    }}\r\n    validationSchema={Yup.object().shape({\r\n        id: Yup.string('Enter game id').required(\r\n            'Game ID is required',\r\n        ),\r\n        name: Yup.string('Enter game name').required(\r\n            'Game name is required',\r\n        ),\r\n        image_url: Yup.string('Image URL'), \r\n        description: Yup.string('Game Description'), \r\n        price: Yup.string('Game Price'), \r\n       \r\n    })}\r\n    onSubmit={async (values, {setErrors, setStatus, setSubmitting}) => {\r\n        try {\r\n            await handleCreate(values) \r\n            handleCloseCreate()\r\n        }   catch (err) {\r\n            console.error(err)\r\n            setStatus({ success: false })\r\n            setErrors({ submit: err.message })\r\n            setSubmitting(false)\r\n        }\r\n    }}\r\n    >\r\n    {({\r\n        values, \r\n        errors, \r\n        touched, \r\n        handleChange, \r\n        handleBlur, \r\n        handleSubmit, \r\n        isSubmitting,\r\n    }) => (\r\n        <form \r\n        noValidate \r\n        autoComplete='off' \r\n        onSubmit={handleSubmit}\r\n        >\r\n         <DialogTitle id=\"create-dialog-name\">Create Game Info</DialogTitle>   \r\n         <DialogContent>\r\n             <DialogContentText>\r\n                 Create a Game and Add it to the List: \r\n             </DialogContentText>\r\n             <Box>\r\n            <TextField \r\n            autoFocus \r\n            id=\"name\"\r\n            name=\"name\"\r\n            label=\"Name\"\r\n            type=\"text\"\r\n            fullWidth\r\n            value={values.name}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            error={Boolean(touched.name && errors.name)} \r\n            helperText={touched.name && errors.name} \r\n            />\r\n            </Box>\r\n            <Box>\r\n                <TextField \r\n            autoFocus \r\n            id=\"image_url\"\r\n            name=\"image_url\"\r\n            label=\"Image URL\"\r\n            type=\"text\"\r\n            fullWidth\r\n            value={values.image_url}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            error={Boolean(touched.image_url && errors.image_url)} \r\n            helperText={touched.image_url && errors.image_url} \r\n                />\r\n            </Box>\r\n            <Box>\r\n                <TextField \r\n            autoFocus \r\n            id=\"description\"\r\n            name=\"description\"\r\n            label=\"Description\"\r\n            type=\"text\"\r\n            fullWidth\r\n            value={values.description}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            error={Boolean(touched.description && errors.description)} \r\n            helperText={touched.description && errors.description} \r\n\r\n\r\n                />\r\n            </Box>\r\n\r\n\r\n            <Box>\r\n                <TextField \r\n            autoFocus \r\n            id=\"price\"\r\n            name=\"price\"\r\n            label=\"Price\"\r\n            type=\"text\"\r\n            fullWidth\r\n            value={values.price}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            error={Boolean(touched.price && errors.price)} \r\n            helperText={touched.price && errors.price} \r\n                />\r\n            </Box>\r\n         </DialogContent>\r\n         <DialogActions>\r\n             <Button onClick={handleCloseCreate}>Cancel</Button>\r\n             <Button type='submit'>Save</Button>\r\n         </DialogActions>\r\n       \r\n        </form>\r\n    )}\r\n\r\n\r\n\r\n    </Formik>\r\n\r\n    </Dialog>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n   \r\n   </div>\r\n\r\n   </>\r\n\r\n)}\r\n  \r\nexport default PopularGames ","C:\\Users\\Aubrey\\Documents\\reactnodefullstackapp\\client\\src\\CardGames.js",["36","37","38","39"],"C:\\Users\\Aubrey\\Documents\\reactnodefullstackapp\\client\\src\\Welcome.js",[],{"ruleId":"40","severity":1,"message":"41","line":53,"column":22,"nodeType":"42","endLine":53,"endColumn":33},{"ruleId":"43","severity":1,"message":"44","line":95,"column":8,"nodeType":"42","messageId":"45","endLine":95,"endColumn":22},{"ruleId":"43","severity":1,"message":"46","line":99,"column":8,"nodeType":"42","messageId":"45","endLine":99,"endColumn":20},{"ruleId":"43","severity":1,"message":"47","line":103,"column":7,"nodeType":"42","messageId":"45","endLine":103,"endColumn":18},{"ruleId":"40","severity":1,"message":"41","line":107,"column":18,"nodeType":"42","endLine":107,"endColumn":29},"react-hooks/exhaustive-deps","React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","Identifier","no-unused-vars","'debouncedTitle' is assigned a value but never used.","unusedVar","'searchFilter' is assigned a value but never used.","'handleInput' is assigned a value but never used."]