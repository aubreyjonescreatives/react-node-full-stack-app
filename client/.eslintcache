[{"C:\\Users\\Aubrey\\Documents\\reactnodefullstackapp\\client\\src\\index.js":"1","C:\\Users\\Aubrey\\Documents\\reactnodefullstackapp\\client\\src\\DeckofCards.js":"2","C:\\Users\\Aubrey\\Documents\\reactnodefullstackapp\\client\\src\\TopNavigation.js":"3","C:\\Users\\Aubrey\\Documents\\reactnodefullstackapp\\client\\src\\App.js":"4","C:\\Users\\Aubrey\\Documents\\reactnodefullstackapp\\client\\src\\reportWebVitals.js":"5","C:\\Users\\Aubrey\\Documents\\reactnodefullstackapp\\client\\src\\GamesandStats.js":"6","C:\\Users\\Aubrey\\Documents\\reactnodefullstackapp\\client\\src\\serviceWorker.js":"7"},{"size":898,"mtime":1619074460705,"results":"8","hashOfConfig":"9"},{"size":9551,"mtime":1618819354405,"results":"10","hashOfConfig":"9"},{"size":752,"mtime":1618811761277,"results":"11","hashOfConfig":"9"},{"size":523,"mtime":1618808130847,"results":"12","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"9"},{"size":8068,"mtime":1619075855074,"results":"14","hashOfConfig":"9"},{"size":5481,"mtime":1619075003960,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"117wau4",{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Aubrey\\Documents\\reactnodefullstackapp\\client\\src\\index.js",[],"C:\\Users\\Aubrey\\Documents\\reactnodefullstackapp\\client\\src\\DeckofCards.js",["33"],"import React, {useState, useEffect, useCallback} from 'react';\r\nimport axios from 'axios'\r\nimport _ from 'lodash'\r\nimport {Card, IconButton, CardMedia, Typography, Container, \r\n    Dialog, Button, DialogTitle, DialogContent, DialogContentText, \r\n    DialogActions, TextField, Box} from '@material-ui/core'\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport AddCircleIcon from '@material-ui/icons/Add';\r\nimport LazyLoad from 'react-lazyload'\r\nimport './css/cardStyles.css'\r\nimport { Formik } from 'formik' \r\nimport * as Yup from 'yup'\r\n\r\n\r\n//const PORT = process.env.PORT || 3000\r\n\r\n\r\n\r\nconst Loading = () => (\r\n<div>\r\n<h4>Loading...</h4>\r\n\r\n</div>\r\n\r\n\r\n)\r\n\r\n\r\n\r\nconst DeckofCards = () => {\r\n\r\nconst [selectedCard, setSelectedCard] = useState( {_id: ''})\r\nconst [deckData, setDeckData] = useState([])\r\nconst [debouncedName, setDebouncedName] = useState('')\r\nconst [editOpen, setEditOpen] = useState(false)\r\nconst [deleteOpen, setDeleteOpen] = useState(false)\r\n//const url = `https://crud-node-backend-app.herokuapp.com/card`\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst fetchCards = async () => {\r\n    try {\r\n    const cards = await axios.get(`http://localhost:5050/card`)\r\n    setDeckData(cards.data)\r\n    console.log(cards.data)\r\n    } catch (err) {\r\n        console.log(err)\r\n    }\r\n    }\r\n    \r\n    \r\n    \r\n    useEffect(() => {\r\n        fetchCards()\r\n       \r\n    }, [])\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst handleInput = (event) => {\r\n    debounce(event.target.value)\r\n}\r\n\r\n\r\n    const debounce = useCallback(\r\n        _.debounce((searchVal) => {\r\n            setDebouncedName(searchVal)\r\n        }, 1000), \r\n        [],\r\n    )\r\n\r\n    \r\n\r\n\r\n    const handleSearch = () => {\r\n        if (debouncedName) {\r\n            setDeckData(deckData.filter(deck => deck._id.includes(debouncedName)))\r\n        } else {\r\n            fetchCards()\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    const handleClickEditOpen = (card) => {\r\n        setSelectedCard(card.card) \r\n        setEditOpen(true)\r\n    }\r\n\r\n    const handleCloseEdit = () => {\r\n        setEditOpen(false)\r\n    }\r\n    \r\nconst handleUpdate = async (values) => {\r\n    try {\r\n        const result = await axios.put(`http://localhost:5050/card/update`, {\r\n            data: {\r\n                cardId: values._id,\r\n                code: values.code, \r\n                image: values.image, \r\n                value: values.value, \r\n                suit: values.suit\r\n            },\r\n        })\r\n        if (result.status === 200) {\r\n            fetchCards()\r\n        }\r\n    } catch (err) {\r\n        console.error(err)\r\n    }\r\n    }\r\n\r\n\r\n\r\n    \r\n\r\n\r\n\r\nconst handleClickDeleteOpen = (card) => {\r\n    console.log('You clicked to delete')\r\n    console.log(card._id)\r\n    setSelectedCard(card.card)\r\n    setDeleteOpen(true)\r\n}\r\n\r\nconst handleCloseDelete = () => {\r\n    setDeleteOpen(false)\r\n}\r\n\r\nconst handleDelete = async () => {\r\n    setDeleteOpen(false)\r\n    console.log(selectedCard._id)\r\n    try {\r\n        await axios.delete(`http://localhost:5050/card/delete`, { \r\n        data: {   \r\n        cardId: selectedCard._id\r\n        }\r\n    })\r\n    fetchCards()\r\n    } catch (err) {\r\n        console.error(err)\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction hintButton() {\r\n    document.getElementById('gameHints').textContent = 'Hint: Add Cards or Press Restart'\r\n    let hints = document.getElementById('gameHints') \r\n    if (hints.style.display === 'none') {\r\n        hints.style.display = 'block'; \r\n    } else {\r\n        hints.style.display = 'none'\r\n    }\r\n    \r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nreturn (\r\n    <div className=\"main-1\">\r\n     <h1>Card Sorting</h1>\r\n     <h2>How Fast Can You Make a Full Suit?</h2>\r\n    \r\n    <button className=\"buttonHint\" onClick={hintButton}>Show Hint</button>\r\n  \r\n     <div id=\"gameHints\"></div>\r\n     <div></div>\r\n     <form>\r\n         <TextField placeholder='Search' onChange={handleInput} />\r\n         <IconButton aria-label='search' onClick={handleSearch}>\r\n             <SearchIcon />\r\n             </IconButton>\r\n             <IconButton aria-label='add card'>\r\n                <AddCircleIcon/>\r\n             </IconButton>\r\n     </form>\r\n\r\n\r\n\r\n\r\n    {deckData.map((card) => {\r\n     return (\r\n    <Card className=\"card-container\" key={card._id}>\r\n    <LazyLoad placeholder={<Loading></Loading>}> \r\n     <CardMedia className=\"CardMedia\"\r\n     component=\"img\"\r\n     alt={'Card'}\r\n     image={card.image}\r\n     >\r\n \r\n     </CardMedia>\r\n     <Typography>{card.value}</Typography>\r\n     <Typography>OF</Typography>\r\n     <Typography>{card.suit}</Typography>\r\n     <IconButton aria-label='edit' onClick={() => handleClickEditOpen({ card })}> <EditIcon/></IconButton>\r\n     <IconButton aria-label='delete' onClick={() => handleClickDeleteOpen({card})}><DeleteIcon/></IconButton>\r\n     </LazyLoad>\r\n     </Card>\r\n    \r\n    )\r\n    \r\n     })\r\n     }\r\n    <div id=\"restartGame\"></div>\r\n     \r\n     <Dialog \r\n    open={editOpen}\r\n    onClose={handleCloseEdit}\r\n    aria-labelledby='edit-dial'>\r\n    <Formik\r\n    initialValues={{\r\n        id: selectedCard?._id, \r\n        code: selectedCard?.code, \r\n        image: selectedCard?.image, \r\n        value: selectedCard?.value, \r\n        suit: selectedCard?.suit \r\n    }}\r\n    validationSchema={Yup.object().shape({\r\n        id: Yup.string('Enter Card ID').required(\r\n            'Card ID is required', \r\n        ),\r\n        code: Yup.string('Enter card code').required(\r\n            'Card code is required',\r\n        ),\r\n        image: Yup.string('Image URL'), \r\n        value: Yup.string('Value'), \r\n        suit: Yup.string('Suit'), \r\n    })}\r\n    onSubmit={async (values, {setErrors, setStatus, setSubmitting}) => {\r\n        try {\r\n            await handleUpdate(values) \r\n            handleCloseEdit()\r\n        }   catch (err) {\r\n            console.error(err)\r\n            setStatus({ success: false })\r\n            setErrors({ submit: err.message })\r\n            setSubmitting(false)\r\n        }\r\n    }}\r\n    >\r\n    {({\r\n        values, \r\n        errors, \r\n        touched, \r\n        handleChange, \r\n        handleBlur, \r\n        handleSubmit, \r\n        isSubmitting,\r\n    }) => (\r\n        <form \r\n        noValidate \r\n        autoComplete='off' \r\n        onSubmit={handleSubmit}\r\n        >\r\n         <DialogTitle id=\"edit-dial\">Edit Card</DialogTitle>   \r\n         <DialogContent>\r\n             <DialogContentText>\r\n                 Edit Information for this Card: \r\n             </DialogContentText>\r\n             <TextField \r\n            autoFocus \r\n            id=\"id\"\r\n            name=\"id\"\r\n            label=\"Card ID\"\r\n            type=\"text\"\r\n            fullWidth\r\n            value={values._id}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            error={Boolean(touched._id && errors._id)} \r\n            helperText={touched._id && errors._id} \r\n            />\r\n            <TextField \r\n            autoFocus \r\n            id=\"code\"\r\n            name=\"code\"\r\n            label=\"Card Code\"\r\n            type=\"text\"\r\n            fullWidth\r\n            value={values.code}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            error={Boolean(touched.code && errors.code)} \r\n            helperText={touched.code && errors.code} \r\n            />\r\n            <Box>\r\n                <TextField \r\n            autoFocus \r\n            id=\"image\"\r\n            name=\"image\"\r\n            label=\"Card Image\"\r\n            type=\"text\"\r\n            fullWidth\r\n            value={values.image}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            error={Boolean(touched.image && errors.image)} \r\n            helperText={touched.image && errors.image} \r\n                />\r\n            </Box>\r\n            <Box>\r\n                <TextField \r\n            autoFocus \r\n            id=\"value\"\r\n            name=\"value\"\r\n            label=\"Card Value\"\r\n            type=\"text\"\r\n            fullWidth\r\n            value={values.value}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            error={Boolean(touched.value && errors.value)} \r\n            helperText={touched.value && errors.value} \r\n\r\n\r\n                />\r\n            </Box>\r\n\r\n\r\n            <Box>\r\n                <TextField \r\n            autoFocus \r\n            id=\"suit\"\r\n            name=\"suit\"\r\n            label=\"Card Suit\"\r\n            type=\"text\"\r\n            fullWidth\r\n            value={values.suit}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            error={Boolean(touched.suit && errors.suit)} \r\n            helperText={touched.suit && errors.suit} \r\n                />\r\n            </Box>\r\n         </DialogContent>\r\n         <DialogActions>\r\n             <Button onClick={handleCloseEdit}>Cancel</Button>\r\n             <Button type='submit'>Save</Button>\r\n         </DialogActions>\r\n       \r\n        </form>\r\n    )}\r\n\r\n\r\n\r\n    </Formik>\r\n\r\n    </Dialog>\r\n\r\n\r\n\r\n\r\n    <form>\r\n     <Container>\r\n        <Dialog open={deleteOpen} onClose={handleCloseDelete}>\r\n        <DialogTitle>Delete Card</DialogTitle>\r\n        <DialogContent>\r\n            <DialogContentText>\r\n                Are you sure you want to delete this card?\r\n            </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n            <Button onClick={handleCloseDelete}>Cancel</Button>\r\n            <Button onClick={handleDelete}>Delete</Button>\r\n        </DialogActions>\r\n        </Dialog>\r\n     </Container>\r\n\r\n\r\n     </form>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n   \r\n   </div>\r\n\r\n)}\r\n  \r\nexport default DeckofCards ","C:\\Users\\Aubrey\\Documents\\reactnodefullstackapp\\client\\src\\TopNavigation.js",["34"],"import React from 'react';\r\nimport { NavLink } from 'react-router-dom'\r\nimport './css/cardStyles.css'\r\nimport { Container, Navbar } from 'react-bootstrap'\r\n//import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport logo from './assets/images/chaoticneutralgameslogo.png'\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction TopNavigation() {\r\n \r\n\r\nreturn (\r\n  \r\n  <div>\r\n   \r\n   <Container className=\"nav-container\">\r\n  <Navbar expand=\"lg\" variant=\"light\" bg=\"light\">\r\n  <NavLink activeClassName=\"activeLink\" to ='/' className=\"navLink\">Chaotic Neutral Games</NavLink>\r\n      <NavLink activeClassName=\"activeLink\" to=\"/card\" className=\"navLink\">Deck of Cards</NavLink>\r\n  </Navbar>\r\n</Container>\r\n   \r\n   \r\n    </div>\r\n\r\n)\r\n\r\n}\r\n\r\nexport default TopNavigation; \r\n  ","C:\\Users\\Aubrey\\Documents\\reactnodefullstackapp\\client\\src\\App.js",[],"C:\\Users\\Aubrey\\Documents\\reactnodefullstackapp\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Aubrey\\Documents\\reactnodefullstackapp\\client\\src\\GamesandStats.js",["35"],"import React, {useState} from 'react';\r\n//import axios from 'axios'\r\nimport _, { debounce } from 'lodash'\r\nimport {useQuery, useMutation, gql} from '@apollo/client'\r\nimport {Card, IconButton, Typography, Container, \r\n    Dialog, Button, DialogTitle, DialogContent, DialogContentText, \r\n    DialogActions, TextField, Box} from '@material-ui/core'\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n//import AddCircleIcon from '@material-ui/icons/Add';\r\nimport LazyLoad from 'react-lazyload'\r\nimport './css/cardStyles.css'\r\nimport { Formik } from 'formik' \r\nimport * as Yup from 'yup'\r\n\r\n\r\n//const PORT = process.env.PORT || 3000\r\n\r\n\r\n\r\nconst Loading = () => (\r\n<div>\r\n<h4>Loading...</h4>\r\n\r\n</div>\r\n\r\n\r\n)\r\n\r\n\r\n\r\n\r\nconst ALL_GAMES = gql`\r\nquery {\r\n    allGames {\r\n        id \r\n        title\r\n        description \r\n      \r\n    }\r\n}\r\n`\r\nconsole.log(ALL_GAMES)\r\n\r\nconst UPDATE_GAME = gql`\r\nmutation updateGame ($id: Int!, $title: String!, $description: String, $defaultCredits: String) {\r\n    updateGame (id: $id, \r\n        data: {\r\n            title: $title, \r\n            description: $description,\r\n            defaultCredits: $defaultCredits, \r\n           \r\n        }\r\n        ) {\r\n            id\r\n        }\r\n}\r\n`\r\n\r\nconst DELETE_GAME = gql`\r\nmutation deleteGame ($id: Int!) {\r\n    deleteGame (id: $id) {\r\n        id\r\n    }\r\n}\r\n`\r\n\r\n\r\n\r\nconst GamesandStats = () => {\r\n\r\nconst [selectedGame, setSelectedGame] = useState( {title: ''})\r\n//const [debouncedTitle, setDebouncedTitle] = useState('')\r\nconst [editOpen, setEditOpen] = useState(false)\r\nconst [deleteOpen, setDeleteOpen] = useState(false)\r\n\r\n\r\nconst handleInput = (event) => {\r\n    debounce(event.target.value)\r\n}\r\n\r\n\r\n    const { loading, error, data} = useQuery(ALL_GAMES)\r\n    const [updateGame] = useMutation(UPDATE_GAME)\r\n    const [deleteGame] = useMutation(DELETE_GAME)\r\n\r\n\r\n    if (loading) {\r\n        return (\r\n            <Container>\r\n                <Typography>Loading...</Typography>\r\n            </Container>\r\n        )\r\n    }\r\n    if (error) {\r\n        return (\r\n            <Typography>{`${error.message}`}</Typography>\r\n        )\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    const gameList = data.allGames \r\n\r\n\r\n\r\n\r\n    const handleDelete = async () => {\r\n        setDeleteOpen(false)\r\n        console.log(selectedGame.id)\r\n        try {\r\n            deleteGame({ variables: {id: selectedGame.id}})\r\n            } catch (err) {\r\n            console.error(err)\r\n        }\r\n    }\r\n\r\n\r\n    const handleClickEditOpen = (game) => {\r\n        setSelectedGame(game.game) \r\n        setEditOpen(true)\r\n    }\r\n\r\n\r\n    \r\n\r\n    const handleCloseEdit = () => {\r\n        setEditOpen(false)\r\n    }\r\n\r\n\r\n\r\n  \r\n    const handleUpdate = async (values) => {\r\n        updateGame({\r\n            variables: {\r\n                id: selectedGame.id, \r\n                title: values.title, \r\n                defaultCredits: values.defaultCredits, \r\n                description: values.description\r\n            }\r\n        })\r\n        }\r\n    \r\n\r\n\r\n\r\n        const handleClickDeleteOpen = (game) => {\r\n          setSelectedGame(game.game)\r\n          setDeleteOpen(true)\r\n        }\r\n        \r\n        const handleCloseDelete = () => {\r\n            setDeleteOpen(false)\r\n        }\r\n\r\n\r\n\r\n\r\nreturn (\r\n    <div className=\"main-1\">\r\n     <h1 className=\"gamesHeader\">Games</h1>\r\n     <div></div>\r\n     <form className=\"gamestatsSearch\">\r\n         <TextField placeholder='Search' onChange={handleInput} />\r\n         <IconButton aria-label='search'>\r\n             <SearchIcon />\r\n             </IconButton>\r\n     </form>\r\n\r\n\r\n\r\n\r\n    {gameList.map((game) => {\r\n     return (\r\n    <Card className=\"card-container\" key={game.id}>\r\n    <LazyLoad placeholder={<Loading></Loading>}> \r\n     <Typography>{game.title}</Typography>\r\n     <Typography>{game.description}</Typography>\r\n     <Typography>{game.defaultCredits}</Typography>\r\n     <IconButton aria-label='edit' onClick={() => handleClickEditOpen({ game })}> <EditIcon/></IconButton>\r\n     <IconButton aria-label='delete' onClick={() => handleClickDeleteOpen({game})}><DeleteIcon/></IconButton>\r\n     </LazyLoad>\r\n     </Card>\r\n    \r\n    )\r\n    \r\n     })\r\n     }\r\n   \r\n     <Dialog \r\n    open={editOpen}\r\n    onClose={handleCloseEdit}\r\n    aria-labelledby='edit-dial'>\r\n    <Formik\r\n    initialValues={{\r\n        title: selectedGame?.title,  \r\n        description: selectedGame?.description, \r\n        defaultCredits: selectedGame?.defaultCredits,\r\n       \r\n    }}\r\n    validationSchema={Yup.object().shape({\r\n        id: Yup.string('Enter Game ID').required(\r\n            'Game ID is required', \r\n        ),\r\n        \r\n        defaultCredits: Yup.string('Enter Game Default Credits').required(\r\n            'Default Credits code is required',\r\n        ),\r\n        description: Yup.string('Description'), \r\n         \r\n    })}\r\n    onSubmit={async (values, {setErrors, setStatus, setSubmitting}) => {\r\n        try {\r\n            await handleUpdate(values) \r\n            handleCloseEdit()\r\n        }   catch (err) {\r\n            console.error(err)\r\n            setStatus({ success: false })\r\n            setErrors({ submit: err.message })\r\n            setSubmitting(false)\r\n        }\r\n    }}\r\n    >\r\n    {({\r\n        values, \r\n        errors, \r\n        touched, \r\n        handleChange, \r\n        handleBlur, \r\n        handleSubmit, \r\n        isSubmitting,\r\n    }) => (\r\n        <form \r\n        noValidate \r\n        autoComplete='off' \r\n        onSubmit={handleSubmit}\r\n        >\r\n         <DialogTitle id=\"edit-dial\">Edit Game</DialogTitle>   \r\n         <DialogContent>\r\n             <DialogContentText>\r\n                 Edit Information for this Game: \r\n             </DialogContentText>\r\n             <TextField \r\n            autoFocus \r\n            id=\"title\"\r\n            name=\"title\"\r\n            label=\"Game ID\"\r\n            type=\"text\"\r\n            fullWidth\r\n            value={values.title}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            error={Boolean(touched.title && errors.title)} \r\n            helperText={touched.title && errors.title} \r\n            />\r\n            <TextField \r\n            autoFocus \r\n            id=\"defaultCredits\"\r\n            name=\"defaultCredits\"\r\n            label=\"Credits\"\r\n            type=\"text\"\r\n            fullWidth\r\n            value={values.defaultCredits}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            error={Boolean(touched.defaultCredits && errors.defaultCredits)} \r\n            helperText={touched.defaultCredits && errors.defaultCredits} \r\n            />\r\n            <Box>\r\n                <TextField \r\n            autoFocus \r\n            id=\"description\"\r\n            name=\"description\"\r\n            label=\"Game Description\"\r\n            type=\"text\"\r\n            fullWidth\r\n            value={values.description}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            error={Boolean(touched.description && errors.description)} \r\n            helperText={touched.description && errors.description} \r\n\r\n\r\n                />\r\n            </Box>\r\n         </DialogContent>\r\n         <DialogActions>\r\n             <Button onClick={handleCloseEdit}>Cancel</Button>\r\n             <Button type='submit'>Save</Button>\r\n         </DialogActions>\r\n       \r\n        </form>\r\n    )}\r\n\r\n\r\n\r\n    </Formik>\r\n\r\n    </Dialog>\r\n\r\n\r\n\r\n\r\n    <form>\r\n     <Container>\r\n        <Dialog open={deleteOpen} onClose={handleCloseDelete}>\r\n        <DialogTitle>Delete Game</DialogTitle>\r\n        <DialogContent>\r\n            <DialogContentText>\r\n                Are you sure you want to delete this Game?\r\n            </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n            <Button onClick={handleCloseDelete}>Cancel</Button>\r\n            <Button onClick={handleDelete}>Delete</Button>\r\n        </DialogActions>\r\n        </Dialog>\r\n     </Container>\r\n\r\n\r\n     </form>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n   \r\n   </div>\r\n\r\n)\r\n\r\n}\r\n\r\n\r\n  \r\nexport default GamesandStats ","C:\\Users\\Aubrey\\Documents\\reactnodefullstackapp\\client\\src\\serviceWorker.js",[],{"ruleId":"36","severity":1,"message":"37","line":73,"column":22,"nodeType":"38","endLine":73,"endColumn":33},{"ruleId":"39","severity":1,"message":"40","line":6,"column":8,"nodeType":"38","messageId":"41","endLine":6,"endColumn":12},{"ruleId":"39","severity":1,"message":"42","line":3,"column":8,"nodeType":"38","messageId":"41","endLine":3,"endColumn":9},"react-hooks/exhaustive-deps","React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","Identifier","no-unused-vars","'logo' is defined but never used.","unusedVar","'_' is defined but never used."]