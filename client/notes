


  const routes = [
  { path: '/cards', Component: DeckofCards }

]


  
  
  {routes.map(({ path, Component}) => (
    <Route key={ path } exact path={path}>
      {({ match}) => (
        <CSSTransition 
        in={match !== null}
        timeout={300} 
        classNames='fade'
        unmountOnExit 
        >
          <div className='fade'>
            <Component/>
          </div>
        </CSSTransition>
      )}
    </Route>
  ))}








  

      <Dialog 
    open={createOpen}
    onClose={handleCloseCreate}
    aria-labelledby='create-dialog-name'
    >
    <Formik
    initialValues={{ 
        id: selectedGame?._id,
        name: selectedGame?.name, 
        image_url: selectedGame?.image_url, 
        description: selectedGame?.description, 
        price: selectedGame?.price, 
       
    }}
    validationSchema={Yup.object().shape({
        id: Yup.string('Enter game ID').required(
            'Game ID is required',
        ),
        name: Yup.string('Enter game name').required(
            'Game name is required',
        ),
        image_url: Yup.string('Image URL'), 
        description: Yup.string('Game Description'), 
        price: Yup.string('Game Price'), 
        
    })}
    onSubmit={async (values, {setErrors, setStatus, setSubmitting}) => {
        try {
            await handleCreate(values) 
            handleCloseCreate()
        }   catch (err) {
            console.error(err)
            setStatus({ success: false })
            setErrors({ submit: err.message })
            setSubmitting(false)
        }
    }}
    >
    {({
        values, 
        errors, 
        touched, 
        handleChange, 
        handleBlur, 
        handleSubmit, 
        isSubmitting,
    }) => (
        <form 
        noValidate 
        autoComplete='off' 
        onSubmit={handleSubmit}
        >
         <DialogTitle id="create-dialog-name">Create a Game:</DialogTitle>   
         <DialogContent>
             <DialogContentText>
                 All of these fields are required with text: 
             </DialogContentText>
             <Box>
            <TextField 
            autoFocus 
            id="name"
            name="name"
            label="Name"
            type="text"
            fullWidth
            value={values.name}
            onChange={handleChange}
            onBlur={handleBlur}
            error={Boolean(touched.name && errors.name)} 
            helperText={touched.name && errors.name} 
            />
            </Box>
            <Box>
                <TextField 
            autoFocus 
            id="image_url"
            name="image_url"
            label="Image URL"
            type="text"
            fullWidth
            value={values.image_url}
            onChange={handleChange}
            onBlur={handleBlur}
            error={Boolean(touched.image_url && errors.image_url)} 
            helperText={touched.image_url && errors.image_url} 
                />
            </Box>
            <Box>
                <TextField 
            autoFocus 
            id="description"
            name="description"
            label="Description"
            type="text"
            fullWidth
            value={values.description}
            onChange={handleChange}
            onBlur={handleBlur}
            error={Boolean(touched.description && errors.description)} 
            helperText={touched.description && errors.description} 


                />
            </Box>


            <Box>
                <TextField 
            autoFocus 
            id="price"
            name="price"
            label="Price"
            type="text"
            fullWidth
            value={values.price}
            onChange={handleChange}
            onBlur={handleBlur}
            error={Boolean(touched.price && errors.price)} 
            helperText={touched.price && errors.price} 
                />
            </Box>

         </DialogContent>
         <DialogActions>
             <Button onClick={handleCloseCreate}>Cancel</Button>
             <Button type='submit' onClick={handleCloseCreate}>Save</Button>
         </DialogActions>
       
        </form>
    )}



    </Formik>

    </Dialog>










     <Dialog open={createOpen} onClose={handleCloseCreate} aria-labelledby="create-dialog-name">
        <DialogTitle id="create-dialog-name">Create a Game</DialogTitle>
        <DialogContent>
          <DialogContentText>
            All fields are required with text to create a game and add it to the list:
          </DialogContentText>
          <TextField
            autoFocus
            margin="dense"
            id="id"
            label="Game ID"
            type="text"
            fullWidth
           
          />
          <TextField
            autoFocus
            margin="dense"
            id="name"
            label="Game Name"
            type="text"
            fullWidth
            onChange={addGame}
          />
            <TextField
            autoFocus
            margin="dense"
            id="image_url"
            label="Game Image URL"
            type="text"
            fullWidth
            onChange={addGame}
          />
            <TextField
            autoFocus
            margin="dense"
            id="description"
            label="Game Description"
            type="text"
            fullWidth
            onChange={addGame}
          />
            <TextField
            autoFocus
            margin="dense"
            id="price"
            label="Game Price"
            type="text"
            fullWidth
            onChange={addGame}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseCreate} color="primary">
            Cancel
          </Button>
          <Button onClick={handleCloseCreate} color="primary">
            Create Game
          </Button>
        </DialogActions>
      </Dialog>
  


const initialFormState = {
    id: null, 
    name: '', 
    image_url: '', 
    description: '', 
    price: ''
}



const [createData, setCreateData] = useState( {initialFormState})







const handleInputChange = event => {
const { name, value } = event.target

setCreateData({...createData, [name]: value})

}




const addGame = createData => {
   
    setCreateData({...createData})
}


 <form onSubmit={event => {
    event.preventDefault()
    if(!createData.name || createData.image_url || createData.description || createData.price)
    return 
    props.createGame(createData)
    setCreateData(initialFormState)
  }}>


   <form onSubmit={event => {
    event.preventDefault()
    if(!createData.name || createData.image_url || createData.description || createData.price)
    return 
    props.createGame(createData)
    setCreateData(initialFormState)
  }}>
      <input type="text" name="name" placeholder="Enter Name" value={createData.name} onChange={handleInputChange}/>
      <input type="text" name="image_url" placeholder="Enter Image URL" value={createData.image_url} onChange={handleInputChange}/>
      <input type="text" name="description" placeholder="Enter Description" value={createData.description} onChange={handleInputChange}/>
      <input type="text" name="price" placeholder="Enter Price" value={createData.price} onChange={handleInputChange}/>
      <IconButton aria-label='add' className="addButton">Create Game <AddCircleIcon /></IconButton>

  </form>




 <div>{addGame}</div>